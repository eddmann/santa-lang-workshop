// pipelines.santa â€” threading, composition, partial application, operator functions

// Partial application: provide fewer args to get a new function
let add = |x, y| x + y;
let add1 = add(1);
let double = |x| x * 2;

// Composition: f >> g is g(f(x))
let add1_then_double = add1 >> double;
puts(add1_then_double(5)); // 12

// Threading: left value becomes last arg of right function
puts([1,2,3]
  |> map(|x| x + 1)
  |> filter(|x| x > 2)
  |> push(10)
  |> size);

// Using operator functions with fold
puts(fold(0, +, [1,2,3,4]));
puts(fold(1, *, [2,3,4]));

// Threading with multi-arg functions: x |> f(a,b) == f(a,b,x)
let base = [1,2,3];
puts(base |> push(4));

// Dictionaries: right-biased merge and indexing
let d1 = #{"a": 1};
let d2 = #{"a": 2, "b": 3};
let d3 = d1 + d2;
puts(d3);
puts(d3["b"]);

// Sets: union
puts({1,2} + {2,3});

// Lambdas in pipeline
puts(42 |> |x| x * 2 |> |x| x + 1);
